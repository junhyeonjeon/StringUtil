package com..;

import java.io.IOException;
import java.io.Reader;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import oracle.sql.CLOB;
import sun.misc.Regexp;

public class StringUtil {
	
	public StringUtil() {

	}

	/**
	 *	占쏙옙占쌘울옙占쏙옙 특占쏙옙占쏙옙占쌘뤄옙 占싻몌옙占싹울옙 占쏙옙占�
	 *	@param String str	占싻몌옙占쏙옙 占쏙옙 占쏙옙占쌘울옙
	 *	@param String delim	占쏙옙占쏙옙占쌘뤄옙 占쏙옙占쏙옙 占쏙옙占쏙옙
	 *	@return String[]
	 *
	 *	@sample StringUtil.strSplit("aaa,bbb", "," )
	 */
	public static String[] strSplit(String str, String delim) {
		StringTokenizer st = new StringTokenizer(str, delim);
		Vector vec = new Vector();
		int cnt = st.countTokens();
		String[] tokens = null;

		if (cnt == 1) {
			tokens = new String[1];
			tokens[0] = str;
		} else {
			for (int i = 0; i < cnt; i++)
				vec.addElement(st.nextToken());
			tokens = new String[cnt];
			vec.copyInto(tokens);
			vec.clear();
			vec = null;
		}
		return tokens;
	}

	/**
	 * 占쌉력듸옙 占쏙옙占쌘울옙占쏙옙 null 占싹곤옙占� 占썩본占쏙옙占쌘울옙占쏙옙 占쏙옙占쏙옙占싼댐옙.
	 * @param str 占쏙옙占쌘울옙
	 * @return
	 */
	public static String convNull(String str) {
		if (isNull(str))
			return "";
		return str;
	}
	
	/**
	 * textarea占쏙옙占쏙옙 占쌨아울옙 占쏙옙占쏙옙 占쌕바뀐옙 占승그몌옙 占쌉뤄옙
	 * @param str 占쏙옙占쌘울옙
	 * @return
	 */
	public static String addNextLine(String str) {
		if (isNull(str))
			return "";
		String content = str.replaceAll("\r\n", "<p>");
		return content;
	}

	/**
	 * 占쌉력듸옙 占쏙옙占쌘울옙占쏙옙 null 占싹곤옙占� 占썩본占쏙옙占쌘울옙占쏙옙 占쏙옙占쏙옙占싼댐옙.
	 * @param str 占쏙옙占쌘울옙
	 * @param def 占썩본 占쏙옙占쌘울옙
	 * @return
	 */
	public static String convNull(Object str, String def) {
		if (isNull(str))
			return def;
		return str.toString();
	}

	/**
	 * null 占실댐옙 占쏙옙埇�占쏙옙占쏙옙占쏙옙 확占쏙옙占싼댐옙.
	 * @param str 占쏙옙占쌘울옙
	 * @return
	 */
	public static boolean isNull(Object s) {
		if(s == null) 
			return true;
		
		String str = s.toString();
		return (str == null || str.trim().length() < 1);
	}

	/**
	 * 占쏙옙占쏙옙 占쏙옙 占쌈울옙 占쏙옙占쏙옙 占쏙옙 특占쏙옙 占쏙옙占쌘몌옙 占쏙옙占싸울옙 占쏙옙占쌘뤄옙 占쏙옙占쏙옙
	 * @param String s1 占쏙옙占쌘울옙
	 * @param String s2 占쏙옙占쏙옙占쏙옙
	 * @param String s3 占쌕뀐옙占쏙옙
	 * @return String  占쏙옙환 占쏙옙 占쏙옙占쌘울옙
	 */
	public static String strReplace(String s1, String s2, String s3) {
		if (s1 == null)
			return "";
		String res = "";
		StringTokenizer str = new StringTokenizer(s1, s2);

		while (str.hasMoreTokens()) {
			res += str.nextToken() + s3;
		}

		return res;
	}

	/**
	 * 占쏙옙占쌘울옙占쏙옙占쏙옙 HTML 占승깍옙 占쏙옙占쏙옙
	 * @param s
	 * @return
	 */
	/*
	public static String removeTag(String s) {
		if (s == null)
			return "";
		final int NORMAL_STATE = 0;
		final int TAG_STATE = 1;
		final int START_TAG_STATE = 2;
		final int END_TAG_STATE = 3;
		final int SINGLE_QUOT_STATE = 4;
		final int DOUBLE_QUOT_STATE = 5;
		int state = NORMAL_STATE;
		int oldState = NORMAL_STATE;
		char[] chars = s.toCharArray();
		StringBuffer sb = new StringBuffer();
		char a;
		for (int i = 0; i < chars.length; i++) {
			a = chars[i];
			switch (state) {
			case NORMAL_STATE:
				if (a == '<')
					state = TAG_STATE;
				else
					sb.append(a);
				break;
			case TAG_STATE:
				if (a == '>')
					state = NORMAL_STATE;
				else if (a == '\"') {
					oldState = state;
					state = DOUBLE_QUOT_STATE;
				} else if (a == '\'') {
					oldState = state;
					state = SINGLE_QUOT_STATE;
				} else if (a == '/')
					state = END_TAG_STATE;
				else if (a != ' ' && a != '\t' && a != '\n' && a != '\r'
						&& a != '\f')
					state = START_TAG_STATE;
				break;
			case START_TAG_STATE:
			case END_TAG_STATE:
				if (a == '>')
					state = NORMAL_STATE;
				else if (a == '\"') {
					oldState = state;
					state = DOUBLE_QUOT_STATE;
				} else if (a == '\'') {
					oldState = state;
					state = SINGLE_QUOT_STATE;
				} else if (a == '\"')
					state = DOUBLE_QUOT_STATE;
				else if (a == '\'')
					state = SINGLE_QUOT_STATE;
				break;
			case DOUBLE_QUOT_STATE:
				if (a == '\"')
					state = oldState;
				break;
			case SINGLE_QUOT_STATE:
				if (a == '\'')
					state = oldState;
				break;
			}
		}
		return sb.toString();

	}*/

	/**
	 * Method cropByte. 占쏙옙占쌘울옙 占쏙옙占쏙옙트占쏙옙占쏙옙큼 占쏙옙占쏙옙占쌍곤옙, 占쏙옙표占쏙옙占싹깍옙
	 * @param str 占쏙옙占쌘울옙
	 * @param i 占쏙옙占쏙옙트占쏙옙
	 * @param trail 占쏙옙 占쏙옙占쌘울옙. 占쏙옙) "..."
	 * @return String
	 */
	public static String cropByte(String str, int i, String trail) {
		if (str == null)
			return "";
		String tmp = str;
		int slen = 0, blen = 0;
		char c;
		try {
			//if (tmp.getBytes("UTF-8").length > i) {//3-byte character..
			if(tmp.getBytes("MS949").length>i) {//2-byte character..
				while (blen + 1 < i) {
					c = tmp.charAt(slen);
					blen++;
					slen++;
					if (c > 127)
						blen++;
				}
				tmp = tmp.substring(0, slen) + trail;
			}
		} catch (Exception e) {
		}
		return tmp;
	}

	/**
	 * DB占쏙옙 占쏙옙占쏙옙占� enter key占쏙옙占쏙옙 <br>占쏙옙 占쏙옙환占싼댐옙.
	 *@param String
	 *@return String
	 **/
	public static String convertHtmlBr(String comment) {
		if (comment == null)
			return "";
		int length = comment.length();
		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < length; ++i) {
			String comp = comment.substring(i, i + 1);
			if ("\r".compareTo(comp) == 0) {
				comp = comment.substring(++i, i + 1);
				if ("\n".compareTo(comp) == 0)
					sb.append("<br/>");
			} else {
				sb.append(comp);
			}
		}
		return sb.toString();

	}
	
	public static String convertHtmlBrForUnix(String comment) {
		  if (comment == null)
		   return "";
		  int length = comment.length();
		  StringBuffer sb = new StringBuffer();

		  for (int i = 0; i < length; ++i) {
		   String comp = comment.substring(i, i + 1);
		   if ("\r".compareTo(comp) == 0) {
		    comp = comment.substring(++i, i + 1);
		    if ("\n".compareTo(comp) == 0)
		     sb.append("<br/>");
		   }else if("\n".compareTo(comp) == 0){
		    sb.append("<br/>");
		   } else {
		    sb.append(comp);
		   }
		  }
		  return sb.toString();
	}
	/**
	 * 占쏙옙 占싸듸옙占쏙옙占쏙옙 占쏙옙占쌘곤옙 占쌀뱄옙占쌘띰옙占� 占쎈문占쌘뤄옙 占쏙옙환
	 * @param str 占쏙옙占쌘울옙
	 * @return String
	 */
	public static String bigLetter(String str) {
		//String tmp = str;
		String convertStr = "";
		char[] charArray = str.toCharArray(); //Char[]占쏙옙 占쏙옙환

		for (int i = 0; i < str.length(); i++) {
			//System.out.println("Char["+i+"] = "+charArray[i]); //占쏙옙환占쏙옙 Char 占쏙옙占�
			if ((charArray[i] >= 97) && (charArray[i] <= 122)) {
				charArray[i] -= 32; //占쏙옙 占싸듸옙占쏙옙占쏙옙 占쏙옙占쌘곤옙 占쌀뱄옙占쌘띰옙占� 占쎈문占쌘뤄옙 占쏙옙환
				convertStr += charArray[i];
			}
		}

		return convertStr;
	}

	/**
	 * 占쏙옙 占싸듸옙占쏙옙占쏙옙 占쏙옙占쌘곤옙 占쎈문占쌘띰옙占� 占쌀뱄옙占쌘뤄옙 占쏙옙환
	 * @param str 占쏙옙占쌘울옙
	 * @return String
	 */
	public static String smallLetter(String str) {
		//String tmp = str;
		String convertStr = "";
		char[] charArray = str.toCharArray(); //Char[]占쏙옙 占쏙옙환

		for (int i = 0; i < str.length(); i++) {
			//System.out.println("Char["+i+"] = "+charArray[i]); //占쏙옙환占쏙옙 Char 占쏙옙占�
			if ((charArray[i] >= 65) && (charArray[i] <= 90)) {
				charArray[i] += 32; //占쏙옙 占싸듸옙占쏙옙占쏙옙 占쏙옙占쌘곤옙 占쎈문占쌘띰옙占� 占쌀뱄옙占쌘뤄옙 占쏙옙환
				convertStr += charArray[i];
			}
		}

		return convertStr;
	}

	/**
	 * Character Set占쏙옙 UTF-8占쏙옙 占쏙옙占쏙옙占쏙옙
	 * @param   str     占쏙옙환占쏙옙 占쏙옙占쏙옙
	 * @return  String  占쏙옙환占쏙옙占쏙옙
	 */
	public String convUTF(String str) {
		String tmp = new String("");
		if (str == null || str.length() == 0)
			return "";
		try {
			tmp = new String(str.getBytes("MS-949"), "UTF-8");
		} catch (Exception e) {

		}
		return tmp;
	}

	/**
	 * getParameterMap() 占쏙옙占쏙옙 占쏙옙占쏙옙 占식띰옙占쏙옙拷占� HashMap占쏙옙占쏙옙 치환
	 * @version
	 * @param Map requestMap
	 * @return HashMap hm
	 * @throws Exception
	 *
	 */
	public Map paramsToHashMap(Map requestMap) throws Exception {
		HashMap hm = new HashMap();

		try {
			Iterator it = requestMap.keySet().iterator();
			Object key = null;
			String[] value = null;

			while (it.hasNext()) {
				key = it.next();
				value = (String[]) requestMap.get(key);

				for (int i = 0; i < value.length; i++) {
					hm.put(key, value[i].toString());
				}
			}
		} catch (Exception e) {
			throw new Exception(e.toString());
		}

		return hm;
	}

	/**
	 * getParameterMap() 占쏙옙占쏙옙 占쏙옙占쏙옙 占식띰옙占쏙옙拷占� QueryString占쏙옙占쏙옙 치환
	 * @version
	 * @param Map requestMap
	 * @return String (a=1&b=2&c=3....)
	 * @throws Exception
	 *
	 */
	public String paramsToQueryString(Map requestMap) throws Exception {
		StringBuffer sp = new StringBuffer();
		int loopCnt = 0;

		try {
			Iterator it = requestMap.keySet().iterator();
			Object key = null;
			String[] value = null;

			while (it.hasNext()) {
				key = it.next();
				value = (String[]) requestMap.get(key);

				for (int i = 0; i < value.length; i++) {
					if (!"cmd".equals(key.toString())
							&& !"returnCmd".equals(key.toString())) {
						if (loopCnt > 0)
							sp.append("&");
						sp.append(key.toString() + "=" + value[i].toString());
					}
				}

				loopCnt++;
			}
		} catch (Exception e) {
			throw new Exception(e.toString());
		}

		return sp.toString();
	}

	/**
	 * getParameterMap() 占쏙옙占쏙옙 占쏙옙占쏙옙 占식띰옙占쏙옙拷占� QueryString占쏙옙占쏙옙 치환
	 * cmd占쏙옙占쏙옙
	 * @version
	 * @param Map requestMap
	 * @return String (a=1&b=2&c=3....)
	 * @throws Exception
	 *
	 */
	public String paramsToQueryStringWithCmd(Map requestMap) throws Exception {
		StringBuffer sp = new StringBuffer();
		int loopCnt = 0;

		try {
			Iterator it = requestMap.keySet().iterator();
			Object key = null;
			String[] value = null;

			while (it.hasNext()) {
				key = it.next();
				value = (String[]) requestMap.get(key);

				for (int i = 0; i < value.length; i++) {
					if (loopCnt > 0)
						sp.append("&");
					sp.append(key.toString() + "=" + value[i].toString());
				}

				loopCnt++;
			}
		} catch (Exception e) {
			throw new Exception(e.toString());
		}

		return sp.toString();
	}

	/**
	 * 占쏙옙占쌘울옙占쏙옙 占쏙옙큰占쏙옙占쏙옙 占쏙옙占쏙옙占쌔쇽옙 1占쏙옙占쏙옙 占썼열占쏙옙 占쏙옙占쏙옙占싼댐옙.
	 * @param s - 占쏙옙큰占쏙옙 占쏙옙占쏙옙 占쏙옙占쌘울옙
	 * @param token - 占쏙옙占쏙옙占쏙옙
	 * @return 占쏙옙占쏙옙占쌘뤄옙 占싻몌옙占쏙옙 1占쏙옙占쏙옙瓦�
	 */
	public static String[] cutTokenToArray(String s, String token) {
		StringTokenizer stz = new StringTokenizer(s, token);
		String result[] = new String[stz.countTokens()];
		try {
			for (int j = 0; j < result.length; j++)
				result[j] = stz.nextToken();
		} catch (Exception exception) {
		}
		return result;
	}

	/**
	 * CLOB占쏙옙 String占쏙옙占쏙옙 占쏙옙환占싼댐옙.
	 *@param CLOB
	 *@return String
	 **/
	public static String getStringForCLOB(CLOB clob) {
		String str = "";
		StringBuffer sbf = new StringBuffer();
		Reader br = null;
		char[] buf = new char[2048];
		int readcnt;

		try {
			br = clob.getCharacterStream(0L);

			while ((readcnt = br.read(buf, 0, 1024)) != -1) {
				sbf.append(buf, 0, readcnt);
			}

		} catch (Exception e) {
			System.out.println("Failed to eate String object from CLOB");
			System.out.println(e.getMessage());
		} finally {
			if (br != null)
				try {
					br.close();
				} catch (IOException e) {
					System.out.println("Failed to close BufferedReader object");
					System.out.println(e.getMessage());
				}
		}
		return sbf.toString();
	}

	public static String subString(String str, int startidx, int endidx) {
		String returnString = "";
		try {
			returnString = str.substring(startidx, endidx);
		} catch (Exception e) {
			return "";
		}

		return returnString;
	}
	
    public static String fineImgTag(String s) {
     	if(s == null || s.equals("")){
     		s = "";
     	}else{     		
     		     		
     	    Pattern p = Pattern.compile("\\<(\\/?)(img|IMG)([^<>]*)>");
     	    Matcher m = p.matcher(s);     	         
     	    
     	    s = "";
     	     while(m.find()) { 
     	        s += m.group(0);
     	     }     	    
     	}    	
     	return s;         
     }
        
    public static String convNumber(String s) {
    	String chars = "0123456789";
    	boolean isCheck = false;    	
    	s = convNull(s,"0");    	
		for(int inx = 0; inx < s.length(); inx++) {
			if(chars.indexOf(s.charAt(inx)) == -1){
				isCheck = true;
			}
		}
		if(isCheck){
			s = "0";
		}
		
    	return s;
    }
    
    
    public static List randomInt(int len, int count){
    	List list = new ArrayList();
    	Random random = new Random();
    	
    	int i = 0;    	
    	String tm ="";
    	boolean checkEquals = false;
    	
    	if(len < count){
    		return list;
    	}
    	
		while(true){
    		checkEquals = false;
    		tm = String.valueOf(random.nextInt(len));
    		if("0".equals(tm)) tm = "1";
    		
    		if(i >= count)
    			break;
    		    		
    		if(list.size() ==0){    			
    			list.add(tm);
    			i++;    			
    		}else{
    			for(int z=0; z < list.size(); z++){
    				if(tm.equals(list.get(z))){
    					checkEquals = true;
    				}
    			}
    			
    			if(!checkEquals){     				
    				list.add(tm);
    				i++;    				
    			}
    		}    		    		    		   
    	}
    	
    	return list;
    }
 
    public static String getAttachCode()
    {
    	String temp=new java.text.SimpleDateFormat("yyyyMMddhhmmssSSS",Locale.KOREAN).format(new java.util.Date());
    	
    	return temp;
    }
    
    public static String getDateFormat(String date, int type)
    {
    	String temp="";
    	if(type==1)
    		temp = date.substring(0, 4) + "�뀈 " + date.substring(5,7)+"�썡 " + date.substring(8,10)+"�씪";
    	else
    		temp = date;
    	return temp;
    }
    
    public static String setComma(String value)
    {
    	if( value.length()>1)
    	{
	    	Locale korea = Locale.KOREA;
	    	NumberFormat formatter = NumberFormat.getCurrencyInstance(korea);
	    	int nTemp = Integer.parseInt(value);
	    	return formatter.format(nTemp);
    	}
    	return "\\"+value;
    }
    
	public static String getFileName(String filename)
	{
		String name="";
		int idx = filename.lastIndexOf("\\");
		if(idx > -1) 
			name =  filename.substring(idx+1);
		else
			name =  filename;
		
		return name;
	}
	
	public static String removeContents(String str, int len)
	{
		if( str.length()>len)
			str = str.substring(0, len) + "...";
		
		return str;
	}
	
/*	function TextBox2DB(data)
	data = null2str(data)
	data = replace(data, "&", "&amp;")
	data = replace(data, "%", "&#37;")
	data = replace(data, "'", "''")
	data = replace(data, chr(34), """")
	data = replace(data, "<", "&lt;")
	data = replace(data, ">", "&gt;")
	data = replace(data, "^", "&#094;")
	TextBox2DB = data
End Function	


function DB2Text(data)
data = null2value(data, "")
data = replace(data, "&lt;", "<")
data = replace(data, "&gt;", ">")
data = replace(data, "&#37;", "%")
data = replace(data, "&#094;", "^")
data = replace(data, "&amp;", "&")
data = replace(data,"&lt;BR&gt;", "<br/>")
'data = replace(data,"&lt;br&gt;",vbcrlf)	
DB2Text = data

End Function*/



	public static String textToDb(String str) {

	    str = str.replaceAll("&", "&amp;");
	    str = str.replaceAll("%", "&#37;");
	    str = str.replaceAll("'", "''");
	    str = str.replaceAll("<", "&lt;");
	    str = str.replaceAll(">", "&gt;");
	 //   str = str.replaceAll("^", "&#094;");
	    str = str.replaceAll("\r\n", "<BR/>");
	    str = str.replaceAll("\n", "<BR/>");
	    return str;
	}
	 
	public static String editorToDb(String str) {

	    str = str.replaceAll("&", "&amp;");
	    str = str.replaceAll("%", "&#37;");
	    str = str.replaceAll("'", "''");
	    str = str.replaceAll("<", "&lt;");
	    str = str.replaceAll(">", "&gt;");
	 //   str = str.replaceAll("^", "&#094;");
	    str = str.replaceAll("\r\n", "");
	    str = str.replaceAll("\n", "");
	    return str;
	}
	 
	public static String dbToText(String str) {

	    str = str.replaceAll("<BR/>", "\n");
	    str = str.replaceAll("&amp;", "&");
	    str = str.replaceAll("&#37;", "%");
	    str = str.replaceAll("''", "'");
	    str = str.replaceAll("&lt;", "<");
	    str = str.replaceAll("&gt;", ">");
	  //  str = str.replaceAll("&#094;", "^");

	    return str;
	}

	public static String dbToTextView(String str) {

	   
	    str = str.replaceAll("&amp;", "&");
	    str = str.replaceAll("&#37;", "%");
	    str = str.replaceAll("''", "'");
	    str = str.replaceAll("&lt;", "<");
	    str = str.replaceAll("&gt;", ">");
	  //  str = str.replaceAll("&#094;", "^");

	    return str;
	}

			public static String nullcheck(String str,  String Defaultvalue ) throws Exception
		{
			String ReturnDefault = "" ;
			if (str == null)
			{
					ReturnDefault =  Defaultvalue ;
			}
			else if (str == "" )
		 {
					ReturnDefault =  Defaultvalue ;
			}
			else
			{
									ReturnDefault = str ;
			}
			 return ReturnDefault ;
		}

 /**
 * BASE64 Encoder
 * @param str
 * @return
 */
public static String base64Encode(String str)  throws java.io.IOException 
{
    sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();
    byte[] strByte = str.getBytes();
    String result = encoder.encode(strByte);
    return result ;
}

/**
 * BASE64 Decoder
 * @param str
 * @return
 */
public static String base64Decode(String str)  throws java.io.IOException {
    sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();
    byte[] strByte = decoder.decodeBuffer(str);
    String result = new String(strByte);
    return result ;
}



}
